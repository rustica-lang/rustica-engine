From cf0136b736af6066a6a5653cd85419dc00850f7e Mon Sep 17 00:00:00 2001
From: Xenia Lu <xenia.lyy@gmail.com>
Date: Tue, 6 Aug 2024 21:05:39 +0800
Subject: [PATCH 4/4] Tweak submodule loading hooks

---
 core/iwasm/common/wasm_runtime_common.c | 13 ++++++++++---
 core/iwasm/common/wasm_runtime_common.h |  1 +
 core/iwasm/include/wasm_export.h        |  9 ++++++++-
 3 files changed, 19 insertions(+), 4 deletions(-)

diff --git a/core/iwasm/common/wasm_runtime_common.c b/core/iwasm/common/wasm_runtime_common.c
index 89ab1d19..b683343e 100644
--- a/core/iwasm/common/wasm_runtime_common.c
+++ b/core/iwasm/common/wasm_runtime_common.c
@@ -973,13 +973,16 @@ wasm_runtime_start_debug_instance(WASMExecEnv *exec_env)
 
 #if WASM_ENABLE_MULTI_MODULE != 0
 static module_reader reader;
+static module_completer completer;
 static module_destroyer destroyer;
 void
 wasm_runtime_set_module_reader(const module_reader reader_cb,
+                               const module_completer completer_cb,
                                const module_destroyer destroyer_cb)
 {
     reader = reader_cb;
     destroyer = destroyer_cb;
+    completer = completer_cb;
 }
 
 module_reader
@@ -7039,8 +7042,8 @@ wasm_runtime_load_depended_module(const WASMModuleCommon *parent_module,
         return NULL;
     }
 
-    ret = reader(parent_module->module_type, sub_module_name, &buffer,
-                 &buffer_size);
+    args.name = (char *)sub_module_name;
+    ret = reader(parent_module->module_type, &args, &buffer, &buffer_size);
     if (!ret) {
         LOG_DEBUG("read the file of %s failed", sub_module_name);
         set_error_buf_v(parent_module, error_buf, error_buf_size,
@@ -7052,7 +7055,6 @@ wasm_runtime_load_depended_module(const WASMModuleCommon *parent_module,
         goto destroy_file_buffer;
     }
 
-    args.name = (char *)sub_module_name;
     if (get_package_type(buffer, buffer_size) == Wasm_Module_Bytecode) {
 #if WASM_ENABLE_INTERP != 0
         sub_module = (WASMModuleCommon *)wasm_load(
@@ -7070,6 +7072,11 @@ wasm_runtime_load_depended_module(const WASMModuleCommon *parent_module,
         /* others will be destroyed in runtime_destroy() */
         goto destroy_file_buffer;
     }
+    if (completer && !completer(sub_module)) {
+        LOG_DEBUG("error: can not complete the load of the sub_module %s",
+                  sub_module_name);
+        goto unload_module;
+    }
     wasm_runtime_delete_loading_module(sub_module_name);
     /* register on a global list */
     ret = wasm_runtime_register_module_internal(
diff --git a/core/iwasm/common/wasm_runtime_common.h b/core/iwasm/common/wasm_runtime_common.h
index 71264ca7..c94688e4 100644
--- a/core/iwasm/common/wasm_runtime_common.h
+++ b/core/iwasm/common/wasm_runtime_common.h
@@ -849,6 +849,7 @@ wasm_runtime_get_custom_section(WASMModuleCommon *const module_comm,
 #if WASM_ENABLE_MULTI_MODULE != 0
 WASM_RUNTIME_API_EXTERN void
 wasm_runtime_set_module_reader(const module_reader reader,
+                               const module_completer completer,
                                const module_destroyer destroyer);
 
 module_reader
diff --git a/core/iwasm/include/wasm_export.h b/core/iwasm/include/wasm_export.h
index 85fd522d..a78beed8 100644
--- a/core/iwasm/include/wasm_export.h
+++ b/core/iwasm/include/wasm_export.h
@@ -420,9 +420,14 @@ wasm_runtime_is_xip_file(const uint8_t *buf, uint32_t size);
  * Callback to load a module file into a buffer in multi-module feature
  */
 typedef bool (*module_reader)(package_type_t module_type,
-                              const char *module_name, uint8_t **p_buffer,
+                              LoadArgs *load_args, uint8_t **p_buffer,
                               uint32_t *p_size);
 
+/**
+ * Callback to complete the load of a module
+ */
+typedef bool (*module_completer)(wasm_module_t module);
+
 /**
  * Callback to release the buffer loaded by module_reader callback
  */
@@ -432,10 +437,12 @@ typedef void (*module_destroyer)(uint8_t *buffer, uint32_t size);
  * Setup callbacks for reading and releasing a buffer about a module file
  *
  * @param reader a callback to read a module file into a buffer
+ * @param completer a callback to complete the load of a module
  * @param destroyer a callback to release above buffer
  */
 WASM_RUNTIME_API_EXTERN void
 wasm_runtime_set_module_reader(const module_reader reader,
+                               const module_completer completer,
                                const module_destroyer destroyer);
 /**
  * Give the "module" a name "module_name".
-- 
2.45.2

